1. Archivo: static/js/chat/code-formatter.js
javascript
Copiar
/**
 * Utilidades para formatear código en los mensajes del chat
 */
const CodeFormatter = {
    /**
     * Detecta y formatea bloques de código en un mensaje
     * @param {string} message - El mensaje a formatear
     * @return {string} - Mensaje con código formateado en HTML
     */
    formatCode: function(message) {
        // Detectar bloques de código con triple backtick
        const codeBlockRegex = /```([a-zA-Z]*)\n([\s\S]*?)```/g;
        
        // Reemplazar bloques de código con elementos <pre><code>
        let formattedMessage = message.replace(codeBlockRegex, (match, language, code) => {
            const langClass = language ? `language-${language}` : '';
            return `<pre><code class="${langClass}">${this.escapeHtml(code)}</code></pre>`;
        });
        
        // Detectar código en línea con backtick simple
        const inlineCodeRegex = /`([^`]+)`/g;
        formattedMessage = formattedMessage.replace(inlineCodeRegex, '<code>$1</code>');
        
        return formattedMessage;
    },
    
    /**
     * Escapa caracteres HTML para mostrar código correctamente
     * @param {string} html - Texto a escapar
     * @return {string} - Texto con caracteres HTML escapados
     */
    escapeHtml: function(html) {
        const escapeMap = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        
        return html.replace(/[&<>"']/g, function(m) {
            return escapeMap[m];
        });
    },
    
    /**
     * Aplica resaltado de sintaxis a los bloques de código
     */
    highlightAll: function() {
        // Si se usa una biblioteca como Prism.js o highlight.js
        if (typeof Prism !== 'undefined') {
            Prism.highlightAll();
        } else if (typeof hljs !== 'undefined') {
            document.querySelectorAll('pre code').forEach((block) => {
                hljs.highlightBlock(block);
            });
        }
    }
};
2. Archivo: static/js/chat/interaction.js
javascript
Copiar
/**
 * Maneja la interacción con el asistente de desarrollo
 */
class DevelopmentAssistant {
    constructor() {
        this.chatInput = document.getElementById('assistant-chat-input');
        this.chatMessages = document.getElementById('assistant-chat-messages');
        this.sendButton = document.getElementById('send-assistant-message');
        this.interventionMode = document.getElementById('intervention-mode');
        
        this.isWaitingResponse = false;
        this.sessionId = this.generateSessionId();
        
        this.initEventListeners();
    }
    
    initEventListeners() {
        // Enviar mensaje al hacer clic en el botón
        this.sendButton.addEventListener('click', () => this.sendMessage());
        
        // Enviar mensaje al presionar Enter
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
    }
    
    /**
     * Envía el mensaje al asistente
     */
    sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message || this.isWaitingResponse) return;
        
        // Añadir mensaje del usuario al chat
        this.addUserMessage(message);
        this.chatInput.value = '';
        
        // Mostrar indicador de escritura
        this.showTypingIndicator();
        this.isWaitingResponse = true;
        
        // Enviar mensaje al backend
        this.sendToBackend(message)
            .then(response => {
                // Ocultar indicador de escritura
                this.hideTypingIndicator();
                
                // Añadir respuesta del asistente
                this.addAssistantMessage(response.message);
                
                // Aplicar cambios de código si es necesario
                if (response.codeChanges) {
                    this.applyCodeChanges(response.codeChanges);
                }
                
                this.isWaitingResponse = false;
            })
            .catch(error => {
                this.hideTypingIndicator();
                this.addSystemMessage(`Error: No se pudo obtener respuesta. ${error.message}`);
                this.isWaitingResponse = false;
            });
    }
    
    /**
     * Envía el mensaje al backend
     * @param {string} message - Mensaje a enviar
     * @return {Promise} - Promesa con la respuesta
     */
    sendToBackend(message) {
        return fetch('/api/dev-assistant/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                message: message,
                sessionId: this.sessionId,
                interventionMode: this.interventionMode.checked
            })
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Error en la comunicación con el servidor');
            }
            return response.json();
        });
    }
    
    /**
     * Añade un mensaje del usuario al chat
     * @param {string} message - Mensaje del usuario
     */
    addUserMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message user-message';
        messageElement.textContent = message;
        this.chatMessages.appendChild(messageElement);
        this.scrollToBottom();
    }
    
    /**
     * Añade un mensaje del asistente al chat
     * @param {string} message - Mensaje del asistente
     */
    addAssistantMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'message assistant-message';
        messageElement.innerHTML = CodeFormatter.formatCode(message);
        this.chatMessages.appendChild(messageElement);
        
        // Aplicar resaltado de sintaxis si hay código
        CodeFormatter.highlightAll();
        this.scrollToBottom();
    }
    
    /**
     * Añade un mensaje del sistema al chat
     * @param {string} message - Mensaje del sistema
     */
    addSystemMessage(message) {
        const messageElement = document.createElement('div');
        messageElement.className = 'system-message';
        messageElement.innerHTML = message;
        this.chatMessages.appendChild(messageElement);
        this.scrollToBottom();
    }
    
    /**
     * Muestra el indicador de escritura
     */
    showTypingIndicator() {
        const typingIndicator = document.createElement('div');
        typingIndicator.className = 'typing-indicator';
        typingIndicator.id = 'typing-indicator';
        
        for (let i = 0; i < 3; i++) {
            const bubble = document.createElement('div');
            bubble.className = 'typing-bubble';
            typingIndicator.appendChild(bubble);
        }
        
        this.chatMessages.appendChild(typingIndicator);
        this.scrollToBottom();
    }
    
    /**
     * Oculta el indicador de escritura
     */
    hideTypingIndicator() {
        const typingIndicator = document.getElementById('typing-indicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }
    
    /**
     * Aplica cambios de código en el proyecto
     * @param {Object} changes - Cambios a aplicar
     */
    applyCodeChanges(changes) {
        if (changes.success) {
            this.addSystemMessage(`
                <p><i class="bi bi-check-circle-fill text-success"></i> <strong>Cambios aplicados:</strong></p>
                <ul>
                    ${changes.files.map(file => `<li>Modificado: ${file}</li>`).join('')}
                </ul>
            `);
        } else {
            this.addSystemMessage(`
                <p><i class="bi bi-exclamation-triangle-fill text-warning"></i> <strong>No se pudieron aplicar todos los cambios:</strong></p>
                <p>${changes.error}</p>
            `);
        }
    }
    
    /**
     * Desplaza el chat hacia abajo
     */
    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
    
    /**
     * Genera un ID de sesión único
     * @return {string} - ID de sesión
     */
    generateSessionId() {
        return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }
}

// Inicializar el asistente cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    window.developmentAssistant = new DevelopmentAssistant();
});
3. Archivo: static/css/tech-selector.css
css
Copiar
/* Estilos para el selector de tecnologías */
.tech-selector {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-bottom: 20px;
}

.tech-item {
    background-color: #333;
    border: 1px solid #555;
    border-radius: 5px;
    padding: 8px 15px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 8px;
}

.tech-item:hover {
    background-color: #444;
    border-color: #777;
}

.tech-item.selected {
    background-color: #1E88E5;
    border-color: #1976D2;
    color: white;
}

.tech-item .tech-icon {
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.tech-item .tech-name {
    font-size: 0.9rem;
}

/* Categorías de tecnologías */
.tech-category {
    margin-bottom: 20px;
}

.tech-category-title {
    font-size: 1rem;
    color: #aaa;
    margin-bottom: 10px;
    border-bottom: 1px solid #444;
    padding-bottom: 5px;
}

/* Estilos para las insignias de tecnología */
.tech-badge {
    display: inline-flex;
    align-items: center;
    background-color: #1E88E5;
    color: white;
    padding: 4px 10px;
    border-radius: 15px;
    margin: 3px;
    font-size: 0.8rem;
}

.tech-badge .tech-icon {
    margin-right: 5px;
}

.tech-badge .remove-tech {
    margin-left: 5px;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.2s;
}

.tech-badge .remove-tech:hover {
    opacity: 1;
}

/* Animación para añadir tecnologías */
@keyframes techAdded {
    0% { transform: scale(0.8); opacity: 0; }
    100% { transform: scale(1); opacity: 1; }
}

.tech-added {
    animation: techAdded 0.3s ease-out;
}
4. Ruta del backend para el API del asistente (Python - Flask)
python
Copiar
# Añade esto a tu archivo app.py o routes.py

from flask import request, jsonify
import uuid
import time

@app.route('/api/dev-assistant/chat', methods=['POST'])
def dev_assistant_chat():
    data = request.json
    message = data.get('message', '')
    session_id = data.get('sessionId', str(uuid.uuid4()))
    intervention_mode = data.get('interventionMode', False)
    
    # Aquí implementarías la lógica para procesar el mensaje
    # y generar una respuesta del asistente
    
    # Simulación de respuesta
    time.sleep(1)  # Simular tiempo de procesamiento
    
    # Ejemplo de respuesta
    if "función" in message.lower() or "agregar" in message.lower():
        response = {
            "message": "He analizado tu solicitud y puedo implementar esa función. Aquí está el código:\n\n```javascript\n/**\n * Valida si una dirección de correo electrónico es válida\n * @param {string} email - El correo electrónico a validar\n * @return {boolean} - true si es válido, false si no\n */\nfunction validateEmail(email) {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n}\n```\n\n¿Quieres que aplique este cambio al archivo?",
            "codeChanges": None  # No aplicamos cambios hasta confirmación
        }
    elif "error" in message.lower() or "depurar" in message.lower():
        response = {
            "message": "He encontrado un posible error en tu código. El problema parece estar en la línea donde intentas acceder a una propiedad de un objeto que podría ser null. Deberías agregar una verificación:\n\n```javascript\n// Código original con error\nconst userName = user.profile.name;\n\n// Código corregido\nconst userName = user && user.profile ? user.profile.name : '';\n```\n\n¿Quieres que aplique esta corrección?",
            "codeChanges": None
        }
    else:
        response = {
            "message": "Entiendo tu solicitud. Para implementar esto necesitaría más detalles sobre el contexto específico. ¿Podrías indicarme en qué archivo quieres hacer estos cambios y proporcionar más información sobre la funcionalidad deseada?",
            "codeChanges": None
        }
    
    return jsonify(response)
Este conjunto de archivos complementa tu plantilla HTML para crear un asistente de desarrollo interactivo con las siguientes características:

Un formateador de código para mostrar correctamente fragmentos de código en el chat
Sistema de interacción con el asistente que maneja mensajes y respuestas
Estilos para el selector de tecnologías
Una ruta de API simulada para el backend
La interfaz permite a los usuarios:

Enviar mensajes al asistente
Recibir respuestas con código formateado
Activar/desactivar el modo de intervención
Ver indicadores de escritura mientras el asistente procesa la solicitud
Recibir notificaciones sobre cambios aplicados al código