# Instrucciones para crear una plataforma de generación automática de aplicaciones

## Visión general del proyecto

Vas a crear una aplicación web moderna que automatiza el desarrollo de software mediante un sistema de agentes de IA. La plataforma permitirá a los usuarios definir sus necesidades y obtener aplicaciones funcionales sin escribir código.

## Componentes principales

### 1. Interfaz de usuario
- Diseño moderno y atractivo con animaciones fluidas
- Panel principal con asistente conversacional
- Área de visualización del plan de desarrollo
- Checklist interactivo para selección de características
- Indicadores de progreso y notificaciones
- Opciones para pausar/continuar proyectos
- Sección de descarga de archivos

### 2. Sistema de agentes de IA
- **Asistente Principal**: Interfaz conversacional inicial, crea plan de desarrollo
- **Agente de Arquitectura**: Define estructura y componentes técnicos
- **Desarrollador de Código**: Genera el código fuente
- **Agente Experto Avanzado**: Resuelve problemas complejos y optimiza soluciones

## Flujo de trabajo

1. **Inicio y captura de requisitos**
   - Usuario describe la aplicación deseada
   - Asistente principal analiza la solicitud y extrae requisitos clave

2. **Generación del plan de desarrollo**
   - Asistente principal crea un plan detallado
   - Se muestra un checklist interactivo con características propuestas
   - Usuario selecciona/modifica características deseadas

3. **Proceso de desarrollo**
   - Se muestra tiempo estimado de desarrollo
   - Agente de Arquitectura define la estructura
   - Desarrollador de Código genera archivos necesarios
   - Agente Experto Avanzado optimiza y resuelve problemas
   - Notificaciones en tiempo real sobre el progreso

4. **Finalización y entrega**
   - Compresión de archivos generados
   - Descarga del proyecto completo
   - Instrucciones de despliegue y ejecución

## Implementación técnica

### Frontend
```javascript
// Estructura básica del frontend (usando React o Vue.js)
// Componentes principales:

// 1. Componente de chat con el asistente
const AssistantChat = () => {
  // Lógica de comunicación con backend y manejo de mensajes
  // Interfaz de chat moderna con animaciones
};

// 2. Componente de plan de desarrollo y checklist
const DevelopmentPlan = () => {
  // Visualización del plan generado
  // Checklist interactivo con opciones seleccionables
};

// 3. Componente de progreso
const ProgressTracker = () => {
  // Barra de progreso animada
  // Notificaciones sobre etapas completadas
  // Tiempo estimado restante
};

// 4. Componente de control de proyecto
const ProjectControls = () => {
  // Botones para pausar/continuar
  // Opciones de descarga
};
```

### Backend
```python
# Estructura del backend (usando Flask, Django o FastAPI)

# 1. Gestión de agentes de IA
class AgentManager:
    def __init__(self):
        self.principal_agent = PrincipalAgent()
        self.architecture_agent = ArchitectureAgent()
        self.code_developer = CodeDeveloperAgent()
        self.expert_agent = ExpertAgent()
    
    def process_request(self, user_request):
        # Coordina el trabajo entre los diferentes agentes
        initial_plan = self.principal_agent.create_plan(user_request)
        return initial_plan
    
    def generate_code(self, approved_plan):
        # Proceso completo de generación de código
        architecture = self.architecture_agent.design_architecture(approved_plan)
        code_files = self.code_developer.generate_code(architecture)
        optimized_code = self.expert_agent.optimize(code_files)
        return self.package_project(optimized_code)

# 2. Definición de los agentes
class PrincipalAgent:
    def create_plan(self, user_request):
        # Analiza la solicitud del usuario
        # Genera un plan de desarrollo estructurado
        # Identifica características clave para el checklist
        pass

class ArchitectureAgent:
    def design_architecture(self, plan):
        # Define la estructura del proyecto
        # Selecciona frameworks y tecnologías
        # Crea diagrama de componentes
        pass

class CodeDeveloperAgent:
    def generate_code(self, architecture):
        # Genera archivos de código fuente
        # Implementa funcionalidades según el plan
        # Crea configuraciones necesarias
        pass

class ExpertAgent:
    def optimize(self, code_files):
        # Revisa y optimiza el código
        # Resuelve problemas complejos
        # Asegura mejores prácticas
        pass

# 3. Gestión de proyectos
class ProjectManager:
    def save_project_state(self, project_id, state):
        # Guarda el estado actual para permitir pausar/continuar
        pass
    
    def package_project(self, files):
        # Comprime los archivos generados
        # Crea documentación
        # Prepara para descarga
        pass
```

## Características de la interfaz de usuario

1. **Diseño visual**
   - Paleta de colores moderna (azules, violetas, blancos)
   - Tipografía clara y legible
   - Iconografía consistente
   - Modo claro/oscuro

2. **Animaciones**
   - Transiciones suaves entre etapas
   - Indicadores de carga animados
   - Efectos de escritura para el asistente
   - Notificaciones con entrada/salida animada

3. **Responsive design**
   - Adaptación a dispositivos móviles y escritorio
   - Reorganización de elementos según tamaño de pantalla

4. **Notificaciones**
   - Sistema de alertas para eventos importantes
   - Indicadores de progreso en tiempo real
   - Estimaciones de tiempo actualizadas

## Consideraciones adicionales

1. **Seguridad**
   - Autenticación de usuarios
   - Protección de propiedad intelectual
   - Cifrado de datos sensibles

2. **Almacenamiento**
   - Sistema para guardar proyectos en curso
   - Historial de proyectos anteriores
   - Opciones de exportación/importación

3. **Personalización**
   - Temas visuales configurables
   - Ajustes de comportamiento de los agentes
   - Plantillas predefinidas para tipos comunes de aplicaciones

4. **Despliegue**
   - Instrucciones detalladas para diferentes entornos
   - Scripts de automatización incluidos
   - Opciones de integración continua

Esta arquitectura te permitirá crear una plataforma potente para la generación automática de aplicaciones con una experiencia de usuario moderna y atractiva.